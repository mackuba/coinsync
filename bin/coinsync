#!/usr/bin/env ruby

require 'bundler/setup'
require 'optparse'

require 'coinsync/config'
require 'coinsync/balance_task'
require 'coinsync/build_task'
require 'coinsync/import_task'
require 'coinsync/run_command_task'
require 'coinsync/source_filter'

def load_config(options)
  CoinSync::Config.load_from_file(options[:config_file])
end

options = {}

OptionParser.new do |opts|
  opts.on('-cCONFIG', '--config CONFIG') { |c| options[:config_file] = c }

  opts.parse!
end

command = ARGV.shift

case command
when nil
  puts "Usage:"
  puts "  coinsync balance [source1 source2 ^excluded_source...]"
  puts "    - imports and prints wallet balances from all or selected sources"
  puts
  puts "  coinsync import [source1 source2 ^excluded_source...]"
  puts "    - imports transaction histories from all or selected sources to files listed in the config"
  puts
  puts "  coinsync build list"
  puts "    - merges all transaction histories into a single list and saves it to build/list.csv"
  puts
  puts "  coinsync build fifo"
  puts "    - merges all transaction histories into a single list, calculates transaction"
  puts "      profits using FIFO and saves the result to build/fifo.csv"
  puts
  puts "  coinsync build summary"
  puts "    - merges all transaction histories into a single list and calculates how many"
  puts "      units of each token you should have in total now"
  puts
  puts "  coinsync run <source> <command> [args]"
  puts "    - executes a custom action from one of the configured importers (see docs for more info)"
  puts
  puts "  * add -c file.yml / --config file.yml to use a custom config path instead of config.yml"
  puts

when 'balance'
  selected, except = CoinSync::SourceFilter.new.parse_command_line_args(ARGV)
  task = CoinSync::BalanceTask.new(load_config(options))
  task.run(selected, except)

when 'import'
  selected, except = CoinSync::SourceFilter.new.parse_command_line_args(ARGV)
  task = CoinSync::ImportTask.new(load_config(options))
  task.run(selected, except)

when 'build'
  output_name = ARGV.shift
  task = CoinSync::BuildTask.new(load_config(options))
  task.run(output_name, ARGV)

when 'run'
  source = ARGV.shift or (puts "Usage: coinsync run <source> <command> [args]"; exit 1)
  command = ARGV.shift or (puts "Usage: coinsync run <source> <command> [args]"; exit 1)

  task = CoinSync::RunCommandTask.new(load_config(options))
  task.run(source, command, ARGV)

else
  raise "Unknown command #{command}"

end
